<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
	    http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

<!--
  1.读取数据库相关参数properities的属性：${url}
  2.配置数据库连接池
    2.1配置连接属性，可以不读配置项文件直接在这里写死
    2.2配置druid，只配了几个常用的
  3.配置mybatis的SplSessionFactory对象
  4.配置扫描dao接口包，动态实现dao接口，注入到spring容器中
 -->

    <!--开启注解的扫描，希望处理service和dao，controller不需要Spring框架去处理-->
    <context:component-scan base-package="com.lj" >
        <!--配置哪些注解不扫描-->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    </context:component-scan>
<!-- 1.读取druid的配置文件-->
<context:property-placeholder location="classpath:druid.properties" xmlns="http://www.springframework.org/schema/context" />
<!-- 2.数据库连接池-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 配置初始化大小、最大 -->
        <property name="initialSize" value="${initialSize}" />
        <property name="maxActive" value="${maxActive}" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${maxWait}" />

    </bean>

<!-- 3.配置mybatis的SqlSessionFactory对象-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 注入数据库连接池      -->
        <property name="dataSource" ref="dataSource"></property>
        <!--  配置MyBaties全局配置文件:mybatis-config.xml       -->
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <!--   扫描domain包，使用别名-->
        <property name="typeAliasesPackage" value="com.lj.domain" />
        <!--  扫描domain实体类对应的映射文件      -->
        <property name="mapperLocations" value="classpath:mapper/*.xml"></property>
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageInterceptor">
                    <property name="properties">
                        <props>
                            <!--设置用的哪个数据库-->
                            <prop key="helperDialect">mysql</prop>
                            <!--设置默认为可以处理页面异常-->
                            <prop key="reasonable">true</prop>
                        </props>
                    </property>
                </bean>
            </array>
        </property>
    </bean>

    <!-- 4.配置Dao接口所在的包，动态实现Dao接口，注入到spring容器中 -->
    <bean id="mapperScanner" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--        扫描所有接口，然后创建各自接口的动态代理类-->
        <!-- 注入sqlSessionFactory -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        <!-- 给出需要扫描Dao接口包 -->
        <property name="basePackage" value="com.lj.dao" />
    </bean>

<!--        &lt;!&ndash; 配置基于注解的声明式事务 如后： &ndash;&gt; <tx:annotation-driven transaction-manager="transactionManager" />-->
<!--     配置spring框架声明式事务管理-->
    <!--配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!--配置事务通知-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="*" isolation="DEFAULT"/>
        </tx:attributes>
    </tx:advice>

    <!--    配置AOP增强-->
    <aop:config>
        <aop:advisor advice-ref="txAdvice" pointcut="execution(* com.lj.service.impl.*ServiceImpl.*(..))"/>
    </aop:config>
</beans>

